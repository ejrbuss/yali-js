(def *root-env* (__env))

;; temporary and bad
(def-proc (reload)
	(let (
		prelude-file "./src/prelude.yali"
		source (js.fs.readFileSync prelude-file "utf-8")
		forms (read source prelude-file))
		(reduce (proc (acc form) (eval form *root-env*)) nil forms)))

(def-proc (log ... args)
	(def write js.process.stdout.write)
	(for-each (proc (a)
			(write (Str a))
			(write " "))
		args)
	(write "\n")
	nil)

;; Bootstrap basic list operations

(def-impl (first List) (proc (list)
	(list.first)))

(def-impl (rest List) (proc (list)
	(list.rest)))

(def-impl (empty? List) (proc (list)
	(list.isEmpty)))

;; Bootstrap asserts

(def-macro (assert condition message)
	`(if ,condition
		nil
		(throw (error (or
			,message
			(Str "Assertion of `" (print (quote ,condition)) "` failed!"))))))

;; Basic macros

(def-macro (def-macros ... definitions)
	(def-proc (match-case expected-name sig body)
			(assert (binary= expected-name (first sig)))
			`([ ,,, (rest sig)] ,body))
	(if (empty? definitions)
		(throw (error "No matched cases for multi macro!"))
		(let (
			name (first (first definitions))
			sig-body-pairs (chunk 2 definitions)
			match-cases (flatten (map (proc ([ sig body ]) (match-case name sig body)) sig-body-pairs)))
			`(def-macro (,name ... args) (match args ,,, match-cases)))))

(def-macro (def-procs ... definitions)
	(def-proc (match-case expected-name sig body)
			(assert (binary= expected-name (first sig)))
			`([ ,,, (rest sig)] ,body))
	(if (empty? definitions)
		(throw (error "No matched cases for multi macro!"))
		(let (
			name (first (first definitions))
			sig-body-pairs (chunk 2 definitions)
			match-cases (flatten (map (proc ([ sig body ]) (match-case name sig body)) sig-body-pairs)))
			`(def-proc (,name ... args) (match args ,,, match-cases)))))

(def-macros
	(and) true
	(and a) a
	(and a b) `(if ,a ,b ,a)
	(and a ... rest) `(if ,a (and ,,, rest) ,a))

(def-macros
	(or) false
	(or a) a
	(or a b) `(if ,a ,a ,b)
	(or a ... rest) `(if ,a ,a (or ,,, rest)))

(def-macros
	(cond) nil
	(cond condition body) `(if ,condition ,body)
	(cond condition body ... more) `(if ,condition ,body ,((id cond) ... more)))

(def-macro (\ ... args)
	`(proc (_) ,,, args))

(def-macro (partial ... args)
	(def-proc (inner counter form)
		(cond
			(binary= form '_) (let (
				new-form (Sym (Str "_" (get counter))))
				(inc counter)
				new-form)
			(List? form) (map (\ (inner counter _)) form)
			true form))
	(let (
		counter (Counter 0)
		body (inner counter args)
		params (map (\ (Sym (Str "_" _))) (range (get counter))))
	`(proc ,params ,body)))

;; basic functions

(def-proc (id a) a)

(def-proc (not a)
	(if a false true))

(def-procs
	(compose f) f
	(compose f g) (proc (... args) (f (g ... args)))
	(compose f ... gs) (proc (... args) (f ((. ... gs) ... args))))

(def-proc (Nil? a) (binary= nil a))
(def-proc (Bool? a) (binary= "boolean" (js.typeof a)))
(def-proc (Str? a) (binary= "string" (js.typeof a)))
(def-proc (Sym? a) (binary= "symbol" (js.typeof a)))
(def-proc (Keyword? a) (binary= Keyword (type-of a)))
(def-proc (List? a) (binary= List (type-of a)))
(def-proc (Map? a) (binary= Map (type-of a)))
(def-proc (Proc? a) (binary= "function" (js.typeof)))
(def-proc (Interface? a) (binary= Interface (type-of a)))

;; proc methods

(def-impl (to-Proc Interface) (proc (i)
	i.dispatch))

;; nil methods

(def-impl (to-Bool Nil) (proc () false))
(def-impl (to-Str Nil) (proc () ""))

;; numeric operators

(def-interface (binary> a b))
(def-interface (binary< a b))
(def-interface (binary>= a b))
(def-interface (binary<= a b))

(def-impl (binary> Num Num) (proc (a b) (js.> a b)))
(def-impl (binary< Num Num) (proc (a b) (js.< a b)))
(def-impl (binary>= Num Num) (proc (a b) (js.>= a b)))
(def-impl (binary<= Num Num) (proc (a b) (js.<= a b)))

(def-procs
	(>) false
	(> a) true
	(> a b) (binary> a b)
	(> a ... more) (reduce binary> a more))

(def-procs
	(<) false
	(< a) true
	(< a b) (binary> a b)
	(< a ... more) (reduce binary< a more))

(def-procs
	(>=) false
	(>= a) true
	(>= a b) (binary> a b)
	(>= a ... more) (reduce binary>= a more))

(def-procs
	(<=) false
	(<= a) true
	(<= a b) (binary> a b)
	(<= a ... more) (reduce binary<= a more))

(def-interface (inc a))
(def-interface (dec a))

(def-impl (inc Num) (proc (a) (js.++ a)))
(def-impl (dec Num) (proc (a) (js.-- a)))

(def-interface (unary+ a))
(def-interface (binary+ a b))

(def-impl (unary+ Num) id)
(def-impl (binary+ Num Num) js.+)

(def-procs
	(+) 0
	(+ a) (unary+ a)
	(+ a b) (binary+ a b)
	(+ a ... rest) (reduce binary+ a rest))

(def-interface (unary- a))
(def-interface (binary- a b))

(def-impl (unary- Num) js.u-)
(def-impl (binary- Num Num) js.-)

(def-procs
	(-) 0
	(- a) (unary- a)
	(- a b) (binary- a b)
	(- a ... rest) (reduce binary- a rest))

(def-interface (unary* a))
(def-interface (binary* a b))

(def-impl (unary* Num) id)
(def-impl (binary* Num Num) js.*)

(def-procs
	(*) 1
	(* a) (unary* a)
	(* a b) (binary* a b)
	(* a ... rest) (reduce binary* a rest))

(def-interface (unary/ a))
(def-interface (binary/ a b))

(def-impl (unary/ Num) id)
(def-impl (binary/ Num Num) js./)

(def-procs
	(/) 1
	(/ a) (unary/ a)
	(/ a b) (binary/ a b)
	(/ a ... rest) (reduce binary/ a rest))

(def-interface (pow a b))

(def-impl (pow Num Num) js.Math.pow)

(def-interface (mod a b))

(def-impl (mod Num Num) js.%)

(def-interface (floor a))
(def-interface (ceil a))
(def-interface (round a))

(def-impl (floor Num) js.Math.floor)
(def-impl (ceil Num) js.Math.ceil)
(def-impl (round Num) js.Math.round)

(def-interface (unary-rand a))

(def-impl (unary-rand Num) (proc (max)
	(floor (* js.Math.random max))))

(def-impl (unary-rand List) (proc (list)
	(nth list (rand (count list)))))

(def-interface (binary-rand a b))

(def-impl (binary-rand Num Num) (proc (min max)
	(floor (+ min (* js.Math.random (- max min))))))

(def-procs
	(rand) (js.Math.random)
	(rand a) (unary-rand a)
	(rand a b) (binary-rand a b))

;; structural

(def-interface (nth a) {
	:default-impl (proc (xs n)
		(if (= n 0)
			(first xs)
			(nth (rest xs) (dec n))))
})

(def-impl (nth List) (proc (a ... args)
	(a.get ... args)))

(def-interface (get a))

(def-impl (get List) (proc (a ... args)
	(a.get ... args)))

(def-impl (get Map) (proc (a ... args)
	(a.get ... args)))

(def-procs
	(=) true
	(= a) true
	(= a b) (binary= a b)
	(= a ... rest) (reduce binary= a rest))

(def-proc (/= ... args)
	(not (= ... args)))

;; asserts

(def-proc (assert= ... args)
	(assert (= ...args)))

(def-proc (assert/= ... args)
	(assert (/= ...args)))

;; basic types

(def-type (Counter value))

(def-impl (inc Counter) (proc (c)
	(js.set c "value" (inc c.value))))

(def-impl (dec Counter) (proc (c)
	(js.set c "value" (dec c.value))))

(def-impl (get Counter) (proc (c)
	c.value))

(def-type (Range min max step))

(def-impl (first Range) (proc (r)
	r.min))

(def-impl (rest Range) (proc ((Range min max step))
	(Range (+ min step) max step)))

(def-impl (empty? Range) (proc ((Range min max step))
	(if (> step 0)
		(>= (+ min step) max)
		(<= (+ min step) max))))

(def-procs
	(range max) (Range 0 max 1)
	(range min max) (Range min max (if (> max min) 1 -1))
	(range min max step) (Range min max step))

;; import/export

;; (export def x 4)
;; (import "my-module.yali" {}) ;
;; (import-as vec "my-vec-module.yali" {}) ; file extension excluded
;; (module "name" {} ...) ; name will be appended to the file module it is present in, but can be overriden
;; support yali and js files

;; smoke test

(assert true)
(assert= 1 (first [1 2 3]))
(assert= [2 3] (rest [1 2 3]))
(assert= (+ 1 2 3 4) 10)